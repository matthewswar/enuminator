package generator

import (
	_ "embed"
	"fmt"
	"os"
	"path"
	"sort"
	"strings"
	"text/template"
	"unicode"

	"github.com/matthewswar/enuminator/version"
	"github.com/pkg/errors"
)

//go:embed enum.go.gotmpl
var enumTemplate string

//go:embed enum_test.go.gotmpl
var enumTestTemplate string

type templateData struct {
	formatFileName string
	rawTemplate    string
}

type templateContext struct {
	EnumName           string
	EnumValues         [][]string
	PackageName        string
	UnexportedEnumName string
}

func GenerateEnum(packagePath string, packageName string, enumName string, enumValues map[string]string, withOptions ...OptionApplier) error {
	options := &Options{
		FilePrefix:   "enum",
		OutputFolder: packagePath,
		Header:       fmt.Sprintf("// Autogenerated by enuminator %s - DO NOT EDIT", version.Version()),
	}
	for _, opt := range withOptions {
		opt.Apply(options)
	}

	flattenedValues := flattenAndSortMap(enumValues)
	for _, data := range []templateData{
		{formatFileName: "%s_%s.go", rawTemplate: enumTemplate},
		{formatFileName: "%s_%s_test.go", rawTemplate: enumTestTemplate},
	} {
		outputName := fmt.Sprintf(data.formatFileName, options.FilePrefix, enumName)
		tmpl := template.New(outputName)
		tmpl, err := tmpl.Parse(data.rawTemplate)
		if err != nil {
			return errors.Wrapf(err, "unable to create template for %s", outputName)
		}

		handler, err := os.OpenFile(path.Join(options.OutputFolder, outputName), os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
		if err != nil {
			return errors.Wrapf(err, "unable to create file for %s", outputName)
		}
		defer handler.Close()

		fmt.Fprintln(handler, options.Header)

		err = tmpl.Execute(handler, newTemplateContext(packageName, enumName, flattenedValues))
		if err != nil {
			return errors.Wrapf(err, "unable to execute template for %s", outputName)
		}
	}

	return nil
}

func flattenAndSortMap(keyValues map[string]string) [][]string {
	const kvpDelimiter = "@@@"
	var joinedValues []string
	for name, val := range keyValues {
		joinedValues = append(joinedValues, fmt.Sprintf("%s%s%s", name, kvpDelimiter, val))
	}
	sort.Strings(joinedValues)

	var result [][]string
	for _, rawKVP := range joinedValues {
		result = append(result, strings.Split(rawKVP, kvpDelimiter))
	}

	return result
}

func newTemplateContext(packageName string, enumName string, enumValues [][]string) *templateContext {
	rawName := []rune(enumName)
	rawName[0] = unicode.ToLower(rawName[0])
	return &templateContext{
		PackageName:        packageName,
		EnumName:           enumName,
		EnumValues:         enumValues,
		UnexportedEnumName: string(rawName),
	}
}
