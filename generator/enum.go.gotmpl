package {{ .PackageName }}

import (
	"fmt"
	"strings"
)

var {{ .UnexportedEnumName }}Mapping = map[string]{{ .EnumName }}{
	{{- range $kvp := .EnumValues }}
	strings.ToLower(string({{ index $kvp 0 }})): {{ index $kvp 1 }},
	{{- end }}
}

func (enum {{ .EnumName }}) MarshalText() ([]byte, error) {
	value, err := {{ .EnumName }}FromString(string(enum))
	if err != nil {
		return nil, fmt.Errorf("unable to marshal text: %w", err)
	}

	return []byte(value), nil
}

func (enum *{{ .EnumName }}) UnmarshalText(raw []byte) error {
	parsedEnum, err := {{ .EnumName }}FromString(string(raw))
	if err != nil {
		return fmt.Errorf("unable to unmarshal {{ .EnumName }} from string: %w", err)
	}

	*enum = parsedEnum
	return nil
}

func {{ .EnumName }}FromString(text string) ({{ .EnumName }}, error) {
	loweredText := strings.ToLower(text)
	if enumValue, ok := {{ .UnexportedEnumName }}Mapping[loweredText]; ok {
		return enumValue, nil
	}

	return {{ .EnumName }}(""), fmt.Errorf("%s is not a valid {{ .EnumName }}", text)
}